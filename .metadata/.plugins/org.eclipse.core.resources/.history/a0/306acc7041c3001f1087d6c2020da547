package com.coforge.training.studentapp.Controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.coforge.training.student.model.Details;
import com.coforge.training.studentapp.model.StudentApplication;
import com.coforge.training.studentapp.repository.StudentAppRepository;
import com.coforge.training.studentapp.service.CompareAdhar;
import com.coforge.training.studentapp.service.StudentAppService;

/*
*Author: Jeedipalli.Reddy
*Date: 14 Dec 2024
*Time: 12:31:34 pm
*Project: Student-Application
*/
@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/student-applications")
public class StudentAppController {

    @Autowired
    private StudentAppService studentApplicationService;
    
    @Autowired
    private CompareAdhar cAdhar;
    
    @Autowired
    private StudentAppRepository sap;

    @PostMapping("/save")
    public ResponseEntity<StudentApplication> createStudentApplication(@RequestBody StudentApplication studentApplication) {
        try {
            StudentApplication savedApplication = studentApplicationService.saveStudentApplication(studentApplication);
            return new ResponseEntity<>(savedApplication, HttpStatus.CREATED);
        } catch (Exception e) {
            e.printStackTrace(); // Log the exception
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    @GetMapping("/compare/aad/{aadhar}")
    public String compareAadharData(@PathVariable String aadhar) {
        boolean isMatch = cAdhar.compareAadharData(aadhar);
        return isMatch ? "Aadhar data matches." : "Aadhar data does not match.";
    }

    @GetMapping("/display")
    public ResponseEntity<List<StudentApplication>> getAllStudentApplications() {
        try {
            List<StudentApplication> applications = studentApplicationService.getAllStudentApplications();
            return new ResponseEntity<>(applications, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    
    @GetMapping("/displays/{aadhar}")
    public ResponseEntity<List<StudentApplication>> getStudentApplicationByAadhar(@PathVariable String aadhar) {
        try {
            List<StudentApplication> application = studentApplicationService.getStudentByAadhar(aadhar);
            return new ResponseEntity<>(application, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/display/{id}")
    public ResponseEntity<StudentApplication> getStudentApplicationById(@PathVariable Long id) {
        Optional<StudentApplication> application = studentApplicationService.getStudentApplicationById(id);
        return application.map(app -> new ResponseEntity<>(app, HttpStatus.OK))
                          .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    @PutMapping("/update/{id}")
    public ResponseEntity<StudentApplication> updateStudentApplication(@PathVariable Long id, @RequestBody StudentApplication studentApplication) {
        Optional<StudentApplication> existingApplication = studentApplicationService.getStudentApplicationById(id);
        if (existingApplication.isPresent()) {
            studentApplication.setApplicatinId(id);
            StudentApplication updatedApplication = studentApplicationService.saveStudentApplication(studentApplication);
            return new ResponseEntity<>(updatedApplication, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

   
    @DeleteMapping("/student/{aadharNumber}")
    public void deleteStudentApplication(@PathVariable String aadharNumber) {
        studentApplicationService.deleteStudentApplication(aadharNumber);
    }
    
    @GetMapping("/check-duplicate/{aadharNumber}")
    public ResponseEntity<Boolean> checkDuplicate(@PathVariable String aadharNumber) {
        boolean isDuplicate = studentApplicationService.isDuplicateAadharNumber(aadharNumber);
        return new ResponseEntity<>(isDuplicate, HttpStatus.OK);
    }
    
    @PostMapping("/student/{adhar}/status")
    public ResponseEntity<String> updateApplicationStatus(@PathVariable String adhar, @RequestBody Map<String, String> statusUpdate) {
        String status = statusUpdate.get("status");
        if (status != null) {
            List<StudentApplication> students = studentApplicationService.getStudentByAadhar(adhar);
            if (students != null && !students.isEmpty()) {
                for (StudentApplication student : students) {
                    student.setStatus(status); // Assuming you have a status field in your StudentApplication entity
                }
                studentApplicationService.saveAll(students); // Save all updated student applications
                return ResponseEntity.ok("Status for Aadhar " + adhar + " updated to " + status);
            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Student not found");
            }
        } else {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid status");
        }
    }
    @GetMapping("/student/{aadhar}/status")
    public ResponseEntity<String> getStudentStatus(@PathVariable String aadhar) {
        List<StudentApplication> students = studentApplicationService.getStudentByAadhar(aadhar);
        if (students != null && !students.isEmpty()) {
            // Assuming all applications have the same status, return the status of the first one
            String status = students.get(0).getStatus();
            return ResponseEntity.ok(status);
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Student not found");
        }
    }
    
    @PostMapping("/student/{aadhar}/statusM")
    public ResponseEntity<String> updateApplicationStatusM(@PathVariable String aadhar, @RequestBody Map<String, String> statusUpdate) {
        String statusM = statusUpdate.get("statusM");
        if (statusM != null) {
            List<StudentApplication> students = studentApplicationService.getStudentByAadhar(aadhar);
            if (students != null && !students.isEmpty()) {
                for (StudentApplication student : students) {
                    student.setStatusM(statusM); // Update the new field
                }
                studentApplicationService.saveAll(students); // Save all updated student applications
                return ResponseEntity.ok("StatusM for Aadhar " + aadhar + " updated to " + statusM);
            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Student not found");
            }
        } else {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid statusM");
        }
    }

    @GetMapping("/student/{aadhar}/statusM")
    public ResponseEntity<String> getStudentStatusM(@PathVariable String aadhar) {
        List<StudentApplication> students = studentApplicationService.getStudentByAadhar(aadhar);
        if (students != null && !students.isEmpty()) {
            // Assuming all applications have the same statusM, return the statusM of the first one
            String statusM = students.get(0).getStatusM();
            return ResponseEntity.ok(statusM);
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Student not found");
        }
    }

  

}
